---
title: "Structured Dynamic Documents"

format:
  revealjs:
        theme: simple
        footer: '[MSB105](../index.html)'
        reveal_options:
        code-fold: true
        incremental: true
        smaller: true
        scrollable: true
---

## Where to get more informations

-   [r4ds](https://r4ds.had.co.nz/r-markdown.html)
-   [Markdown](https://bookdown.org/yihui/rmarkdown/)
-   Help menu in RStudio
-   [R Markdown Reference Guide](https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)
-   R Markdown Cheat Sheet (se Help menyen i RStudio )

## Our Tools, short repetition

-   R, a statistical programming language (free implementation of the language S)
-   The "Lingua Franca" of the statisticians
    -   15000+ packages

    -   New tests/routines often début as R packages

    -   [r tutorials](https://data-flair.training/blogs/r-tutorial/)

        -   Built in tutorials (install package `learnr`)
-   Especially relevant packages for us:
    -   `knitr`

    -   `RMarkdown`

    -   `GGplot2`

    -   The `tidyverse` packages

    -   Later on: `sp*` and `sf*` packages to handle spatial data

## Our Tools cont.

-   RStudio (Free version, no official support)
-   RStudio is an IDE (Integrated Developer Environment) for all thing R related
-   Cross platform (mac, windows, linux)

## Our Tools cont.

::: columns
::: {.column width="65%"}
![RSudion IDE (alt click to zoom)](005_001_rstudioSS.png)
:::

::: {.column width="35%"}
-   **Upper left:** Editor
-   **Lower left:** Console and Terminal
-   **Upper right:** History, Environment, git and (from version 1.3) Tutorials.
-   **Lower right:** Files, Plots, Packages and Help
:::
:::

## Our Tools cont.

-   [$\LaTeX$](http://ftp.ntua.gr/mirror/ctan/info/lshort/english/lshort.pdf) (se kap. 3 for matte), used for math support in pdf, html and docx documents, ex.
    `$$\sum_{i=1}^I x_i$$` gives a display equation like $$\sum_{i=1}^I x_i$$.

-   While `$\sum_{i=1}^I x_i$` gives us an in-line equation like $\sum_{i=1}^I x_i$.

## Our Tools cont.

-   We can also do something more fancy like `$$\forall x \in \mathbf{R}:\qquad x^{2} \geq 0$$`

    $$\forall x \in \mathbf{R}:\qquad x^{2} \geq 0$$

-   or `$$\mathbf{X} = \left(\begin{array}{ccc}x_1 & x_2 & \ldots \\ x_3 & x_4 & \ldots \\ \vdots & \vdots & \ddots \end{array} \right)$$`

    $$\mathbf{X} = \left(
         \begin{array}{ccc}x_1 & x_2 & \ldots \\ x_3 & x_4 & \ldots \\ \vdots & \vdots & \ddots \end{array}
         \right)$$

## Our Tools cont.

-   pandoc; works in the background and converts Markdown to different formats pdf(via latex), docx, html etc.
-   Pandoc is quite good at converting latex formulas, even into MS Word formulas.
-   Now we are changing to Quarto (the new Pandoc) that will be even better.
-   Zotero; helps with gathering (Zotero connector) and building collection of references.
-   ~~Mac: Use Firefox or Chrome as browser. Support for Safari returning autumn 2020~~
-   Mac: Zotero 6 has built in Safari support. (You will have to enable the plugin under Valg/Preferences)

## Why Markdown?

-   Easy to learn (manual 3-4 pages)
-   Flexible, can easily be converted into other formats like pdf (via latex), docx (MS Word), html etc.
-   Cross platform (mac, windows, Linux)
-   Plain text, facilitates use of distributed version control systems (support for git/github in RStudio)
-   Plain text, resilient with regard to technological change (plain text formats are more robust than binary formats)

## Why RMarkdown? cont.

-   RMarkdown is Markdown with support for R code (via knitr).
-   Rmarkdown documents can include R code ("statistics") that is executed.
    -   Plots
    -   Tables
    -   Models
    -   Tests
-   knitr takes the R code and output and convert it to markdown automagically.
-   Reproducible research ("The Golden Standard").

## Examples Rmarkdown

-   Writing R-code in Rmarkdown documents.
-   We write in-line code as `` `r knitr::inline_expr("set.seed(1234); round(rnorm(3),3)")` ``
-   which will give us `r set.seed(1234); round(rnorm(3),3)` in the text.
-   alt+cmd+i (mac) or alt+ctrl+i (pc) insert an empty R code chunck

![RMarkdown code chunk](code-snippet.png){fig-align="left" width="502"}

## Example Rmarkdown {.smaller}

```{r, echo=TRUE, fig.height=3, fig.width=4}
head(cars, n = 3)
# mai is a Graphical Parameter that specifies margin sizes in inches
# here all 4 set to 0. Do ?par in Console to see details.
plot(cars, mai = c(rep(4, 0)))
```

## Example Quarto

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| label: some-r-code
#| fig-cap: Head of cars, and a plot
#| fig-height: 3
#| fig-width: 4
#| fig-align: left
head(cars, n = 3)
# mai is a Graphical Parameter that 
# specifies margin sizes in inches
# here all 4 set to 0. Do ?par in 
# Console to see details.
plot(cars, mai = c(rep(4, 0)))
```
:::

::: {.column width="50%"}
![Quarto r code](quarto-r-code.png)

-   Quarto specifies chunk options in an alternative format.
-   The Rmarkdown way still works.
-   Please note true (lowecase) **not** TRUE after echo in Quarto alternative.
:::
:::

## What happened here? {.smaller}

-   R was first run on the **R code** parts of our document
-   The package `knitr` converted the code and the results into pure **Markdown** chunks
-   Each chunk was then inserted into the Markdown document to replace R-code and output
-   The resulting pure **Markdown** document was then converted to **html** (or .docx, .pdf, .rtf etc.) by `pandoc`.
-   Similar process for *Quarto*, but then *Quarto* instead of *Pandoc.*

## What happened here? {.smaller}

::: columns
::: {.column width="60%"}
From the .md (Markdown) file:

![Some markdown text.](md_snippet.png){width="80%"}
:::

::: {.column width="40%"}
Remember that ```` ```code``` ```` is set as code in Markup

Again: `knitr` picks out the R-code in our RMarkdown document.
It then runs the code through R and return the code (if echo=TRUE) and the output as Markdown text.
This Markdown text is inserted into the RMarkdown document and replaces the R-code.
Hence we end up with a pure Markdown document.
This Markdown document is then in turn converted by pandoc into the format we want, i.e. html (default), pfd (via latex), MS Word etc..
:::
:::

## Structure of R Notebooks

![structured document](structA.png){width="80%"}

## Structure of R Notebooks

![Code chunck missing previous slide](structB.png){width="80%"}

-   can turn on/off: include, eval, cache, echo etc.
-   very flexible

## Important chunck options

::: columns
::: {.column width="40%"}
### RMarkdown

-   See [rmarkdown cookbook chap. 11](https://bookdown.org/yihui/rmarkdown-cookbook/chunk-options.html) for more chunk options.

-   `cache=TRUE/FALSE` Turn on/off cache

-   `eval=TRUE/FALSE` Evalualte R code, or not

-   `echo=TRUE/FALSE` Show R code, or not

-   `fig.width: 6` Width of figure

-   `fig.height: 6` Height of figure
:::

::: {.column width="60%"}
### Quarto

-   See [Quarto documentation](https://quarto.org/docs/computations/r.html) for more chunk options. RStudio provides auto completion. Start with writing the first characters, for instance *fig-*, and you will get a list of options that starts with *fig-.*
-   `#| cache: true/false` Turn on/off cache
-   `#| eval: true/false` Evalualte R code, or not
-   `#| echo: true/false` Show R code, or not
-   `#| fig-width=6` Width of figure
-   `#| fig-height=6` Height of figure
:::
:::

## R code style guide

-   We will have to write some R code
-   Best way to avoid bad habits ...
    -   is to never acquire them in the first place
-   hence we use `tidyverse` style guide ([tidyverse style guide](https://style.tidyverse.org))
-   Rstudio has integrated support for `tidyverse` style and will indicate when we err.
    -   Important to set the [Preferences...](../000_introduction/pref-setup-2022/ps2022.html) correctly . Home work to next time.
-   Additional help from the AddIn **styler** (install the `styler` package to get the add-in)

## Rcode style guide

-   `install.packages("styler")`
-   `Styler` is a package that installs an add-in that makes it easy to style code according to tidyverse style guide
-   When we have written some R-code, that could do with some styling, we first select the code and then select `Style selction` from the `Addins` drop-down menu.

## Add-in in Rstudio

::: columns-2
![Addins menu](addinmenu.png){width="60%"}

What's in the `Addins` menu will depend on the packages we have installed.
:::

## R Notebook

-   ~~**R Notebook** \> - Everything, results, plots, warnings etc., will be in the `Notebook` \> - `Working directory` is the same as the directory where the `Notebook`is placed. \> - markdown + code in code chunks \> - Support for citations and references? \> - Quite good, but not everything is well documented~~
-   We will use **Quarto Documents ...** or **Quarto Presentations ...**

## R Notebook; empty

![nothing-defined](nothing-defined.png){width="50%"}

## R Notebook; getwd

![getwd](getwd.png){width="50%"}

## R Notebook; y-defined in console

![y-defined-in-console](y-defined-in-console.png){width="60%"}

## R Notebook; run-all-above

![run-all-above](run-all-above.png){width="60%"}

## Spesielt for R Notebooks/Quarto documents/presentations

-   `Working directory` er mappen som `R Notebook`-en ligger i. I tillegg vil også `output` fra kommandoene og ting som `warnings` havner i selve `notebook`-en.
-   Samme gjelder for Quarto dokumenter/presentasjoner.
-   For detaljer er [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/notebook.html) kap. 3.2 en god kilde.

## Spesielt for R Notebooks/Quarto documents/presentations fortsettelse

```{r nothing-defined}
#| eval: false
#| echo: true
# Do not run this
# Do not do this in R Notebooks you share with others. Rude!
rm(list = ls())
# ls() is OK
ls()
```

```{r get-wd}
#| eval: true
#| echo: true
getwd()
```

## Spesielt for R Notebooks/Quarto documents/presentations fortsettelse

```{r define-x}
#| eval: true
#| echo: true
(x <- 1:3)
```

```{r get-y}
#| eval: false
#| echo: true
y
```

## From Console

![From Console](Console.png)

## In R chunck

```{r y-defined-in-console}
#| echo: true
#Gives problem when we try to compile document
#y
```

```{r}
#| echo: true
#Have to define it in document
y <- 2
```

```{r}
#| echo: true
x + y
```

-   Things defined in Console available in Quarto document (but not reproducible).
-   Things defined in Console **not** available in Quarto document when we try to render.
-   Things evaluated in Quarto available in Console.

## Citations

### What we want to accomplish

    ---
    title: "Citations in R Notebooks"
    bibliography: citeRnotebook.bib
    csl: apa-no-ampersand.csl
    output: html_notebook
    ---

    ## What we want to accomplish:

    The ideas of @gentleman2003, which were implemented by @gentleman2005 when parts of @golub1999 was reproduced 
    as a *compendium* [@gentleman2003], i.e. reproducible
    research. The @rstudioteam2020 implementation of `R
    Notebook`is a modern ...[snip]
    ## References
    <div id="refs"></div>

should give:

## Citations; `csl: apa-no-ampersand.csl`

![apa-citation](cite-apa.png){width="80%"}

## Citations; `csl: elsevier-harvard.csl`

![harvard-citation](cite-elsevier-harvard.png){width="80%"}

## Citations; `csl: chicago[snip]-ibid.csl`

![chicago-citation](cite-chicago.png){width="70%"}

## pdf; `csl: apa-no-ampersand.csl`

![apa-citation-pdf-version](apa-pdf.png){width="50%"}

## Citation, how does it work?

We have a .bib file.
Trust me, you do not want to do this by hand.

    @book{allaire2020,
      title = {Rmarkdown: {{Dynamic}} Documents for r},
      author = {Allaire, JJ and Xie, Yihui and McPherson, Jonathan and Luraschi, Javier and Ushey, Kevin and Atkins, Aron and Wickham, Hadley and Cheng, Joe and Chang, Winston and Iannone, Richard},
      date = {2020},
      url = {https://github.com/rstudio/rmarkdown}
    }

    @article{almas2012,
      title = {Norske børshandlede fond : en kvantitativ analyse av fondenes egenskaper},
      shorttitle = {Norske børshandlede fond},
      author = {Almås, Pål Jonas Brandåstrø and Andersen, Kristian Peder Mørtvedt},
      date = {2012},
      url = {https://openaccess.nhh.no/nhh-xmlui/handle/11250/169733},
      urldate = {2020-05-07},
      abstract = {Denne masterutredningen

## Citation, how does it work? {.smaller}

![citekey](allaire2020.png)

-   Use the `citekey` to pull out the info from the `.bib` file and places it in the reference list. Formated according to the CLS file.
-   Put in the citation, also according to CLS file. - Two versions `@allaire2020` and `[@allaire2020]`
-   Only collect the entries we have cited (.bib can be huge and contain all references we have ever collected)
-   `<div id="refs"></div>` gives the placement of the reference list. If not given it will be put at the end of the document
-   How do we know the citekeys? The package `citr` installs a handy RStudio addin. (In later versions of RStudio just use Insert \> Citation from the visual menu.)

## Citation, how does it work?

![\@ Citation from the Insert menu in Visual mode.](citation-newRS.png)

-   Addin (citr) not needed any more. Citation now supported by default in RStudio.

## Citation, how to make the .bib file

-   [Zotero](https://www.zotero.org)
-   [Zotero Connector](https://www.zotero.org/download/)
-   Install [`Better bibtex` for Zotero](https://retorque.re/zotero-better-bibtex/) \> - `https://retorque.re/zotero-better-bibtex/`
-   ~~Install the `citr` package~~
-   Support for citation is now a default feature of RStudio.

## Exercise 1 {.smaller}

**Work alone this time so we avoid the problems with syncing via Github.**

***We need to be updated to latest versions of software!***

-   Install the extensions for Zotero
-   Find the article: *Tidy Data* by Hadley Wickham; Journal of Statistical Software and "harvest" the reference
-   Get bib info for the R package Tidyverse
    1.  Install and load (`library(tidyverse)`) the tidyverse

    2.  In R Console: print(citation(tidyverse), base=bibtex)

    3.  Import into Zotero: `Fil> Importer fra uklippstavle` (dvs. fra **Fil** menyen velg **Importer fra uklippstavle**)
-   Get bib info for R. Copy the reference into Zotero
    1)  In R Console: print(citation(), base=bibtex)
-   Find bib-info for r4ds at Amazon and harvest the reference.

## Exercise 1 cont. {.smaller}

-   Make a new project
-   Write a short text in an R Notebook where you use both versions of citing, (i.e. with and without brackets). Use the 4 sources harvested above.
-   Use at least 5 commits
-   Remember to write nice commit messages ;-)
-   Remember: commit, pull, push
