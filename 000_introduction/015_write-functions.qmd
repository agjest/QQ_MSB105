---
title: "Writing functions"
editor: visual
---

```{r setup}
suppressPackageStartupMessages(
library(tidyverse)
)
```

This is a Quarto document showing how to write some simple functions.

It's very easy to write functions in R and we should *start to practice at once*.

## Very simple function

```{r}
add_numbers <- function(x=2, y=2) {
  x + y
}
```

```{r}
add_numbers()
```

```{r}
add_numbers(5, 10)
```

Better

```{r}
add_numbers(x = 5, y = 10)
```

```{r}
add_numbers(5)
```

```{r}
divide_numbers <- function(x=2, y=2) {
  x/y
}
```

```{r}
divide_numbers()
```

```{r}
divide_numbers(5)
```

x is 5, y = 2

```{r}
divide_numbers(,5)
```

x = 2, y = 5

Clearer version

```{r}
divide_numbers(y=5)
```

## Simple function with *for next loop*.

```{r}
start_stupid_fun <- function(x1 = 0, n = 10) {
# initialise x
x = vector(mode = "numeric", length = n)
x[1] = x1

for (i in seq_along(x[-1])) {
  x[i + 1] = x[i] + 1
}

print(x)
}
```

```{r}
start_stupid_fun()
```

```{r}
start_stupid_fun(x1 = 5, n = 15)
```

### Extensions

```{r}
stupid_fun <- function(
    x1 = 0, 
    n = 10, 
    d = 1, # how much to increase number
    width_fraction = 0.4, # how wide should the output be
    print_to_console = TRUE # where to send the output
    ) {
  # we stop if we are to produce zero numbers
  stopifnot(n > 0)
  # max number of digits in numbers
  dig =  nchar(n*d)
  # allocate a numeric vector with room for n numbers
  x = vector(mode = "numeric", length = n)
  # First number in output vector is x1
  x[1] = x1
  # we loop through x vector but drop first element
  for (i in seq_along(x[-1])) {
    # i starts at 1, so first is x1 + d
    x[i + 1] = x[i] + d
    }

# nice trick to control print to console
if (print_to_console) {
print(stringr::str_pad(x, width = dig, side = "left", pad = " "),
      width = width_fraction*getOption("width"))
  } else {
    tibble(x)
  }
}
```

```{r}
# Generate 100 number starting with -13 and increasing by 5
stupid_fun(x1 = -13, n = 100, d = 5, print_to_console = TRUE)
```

```{r}
stupid_fun(x1 = -13, n = 100, width_fraction = 0.8, d = 5, 
           print_to_console = TRUE)
```

## Print to console FALSE

```{r}
stupid_fun(x1 = -21, n = 10, width_fraction = 0.6, d = 5, 
           print_to_console = TRUE)
```

## Zero numbers

```{r}
# uncomment to see result of n=0
#stupid_fun(x1 = -21, n = 0, width_fraction = 0.6, d = 5, print_to_console=TRUE)
```

## Head_and_tail

We have the functions `head()` and `tail()` to inspect respectively the start and end of an R object.
Sometime we'll want to do bought with one command.

### First attempt

```{r}
head_and_tail <- function(x) {
  c(head(x), tail(x))
}
```

```{r}
head_and_tail(mtcars[,1:6])
```

### Second attempt

```{r}
head_and_tail <- function(x, n=3L) {
  as_tibble(
    rbind(rep('Head',length(names(x))),
          head(x, n = n),
          rep('',length(names(x))), 
          rep('Tail',length(names(x))), 
          tail(x, n = n)
          )
    )
}
```

```{r}
head_and_tail(mtcars[,1:6], n = 4)
```

```{r}
h_a_t <- head_and_tail(mtcars[,1:6], n = 8)
```

```{r}
h_a_t
```

```{r}
# siste
```
