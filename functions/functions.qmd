---
title: "Functions"
author: "ag"
format:
  revealjs:
        theme: simple
        footer: '[MSB105](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
bibliography: ag_functions.bib
nocite: '@*'
---

## Load *tidyverse* and *magrittr*

```{r setup}
# get tidyverse to shut up
suppressPackageStartupMessages({
  library(tidyverse)
})
```

```{r}
# create a bib file for the R packages
# used in this document
# Note! Needs to do a touch ag_functions.bib in terminal before first run
# else stops when bibliography: "ag_functions.bib" not found in YAML
knitr::write_bib(
  c(
    "tidyverse"
    ),
  file = "ag_functions.bib"
  )
```

## Functions, chp. 19

r4ds: "You should consider writing a function whenever you've copied and
pasted a block of code more than twice"

-   Sound advice
-   Why?
    -   Reduces the risk of bugs
    -   Easier to change (only need to change the function code)
-   Starting to write functions in R is easy
-   Use verb as name (functions verbs, objects nouns)

## Naming

-   x, y, z: vectors.
-   w: a vector of weights.
-   df: a data frame.
    -   Note df, density of F distribution, is a function in R package
        stats. Maybe my_df or a_df is better.
-   i, j: numeric indices (typically rows and columns).
-   n: length, or number of rows.
-   p: number of columns.
-   Match names of existing functions
    -   i.e. use na.rm for option to remove NAs, not rm.na, remove etc.

## Inputs

-   Omit the data argument (data, x etc.), write the others out in full
    length (R support partial matching).
    -   Rstudio has completion so not much extra to write.
-   We should check input values.
-   How thoroughly?
    -   `stopifnot()` reasonable compromise.

    -   At least for functions that are not ment to have a wide
        distribution.
-   `...`: Arbitrary number of inputs.
    -   Can also be sent to another function (passing on arguments)

## Output

-   Usually last statement evaluated
-   Return early with `return()`
-   Use `invisible()`to make functions pipeable
    -   If only side-effect (save, print etc.) no data out
    -   The pipe ends
    -   Can send data past `print()` with `invisible()`

## Environment

-   Inside function all variables defined are local
-   If variable is not defined R will look outside function (the
    environment where function was defined)
    -   Most programming language would give an error
    -   Why we in the heights assignment could calculate mean and sd for
        male and female and then use them in a pipe to draw different
        distributions for male and female.
    -   The values for mean and sd was not available in the pipe, but
        when R could not find them it looked outside the pipe.

## `if()`, `else if()` and `else`

-   Conditions
-   The structure

. . .

```{r, eval = FALSE}

my_verb <- function(x) {
  if(some condition on x) {
    do alternative 1
  } else if(another condition on x) {
    do alternative 2
  } else if(another condition on x) {
    do alternative 3
  } else {
    If none of the conditions is TRUE, do
    alternative 4
  }
}
```

## To sum up

```{r, eval = FALSE}
my_verb <- function(my_arguments) {
  My code
}
```

. . .

-   Pick a name for the function (verb).
-   List the inputs, or arguments, to the function inside `function()`,
    i.e. `function(x, y, z)`.
-   The code in body of the function, i.e in {code} after
    `function(...)`.
-   Try to follow the `tidyverse` rules for nice code.
    -   Rstudio warns you if you fail to comply.

    -   Addin *Styler* and function *Style selection* is an invaluable
        tool for writing nice code.

## To sum up cont.

-   Don't do things like `+ <- function(x, y) {x - y}`.
    -   What we just did was to give a new definition of the function +.
    -   Even operators are functions in R.
    -   The new + is defined in our current environment ("workspace").
    -   If we delete it, R will find the normal version.
    -   If you just had to try it, remove with `rm(+)`.
        -   The + has to be enclosed in tick marks.

## Simple example

```{r}
decide_number <- function(x) {
#  stopifnot(is.numeric(x) & length(x) == 1)
  if (x > 0) {
    paste(x, "is greater than zero")
  } else if (x < 0) {
    paste(x, "is less than zero")
  } else {
    paste(x, "is zero")
  }
}
```

## Simple example

```{r}
decide_number <- function(x) {
#  stopifnot(is.numeric(x) & length(x) == 1)
  if (x > 0) {
    paste(x, "is greater than zero")
  } else if (x < 0) {
    paste(x, "is less than zero")
  } else {
    paste(x, "is zero")
  }
}
```

```{r}
# testing
decide_number(10)
decide_number(-2)
```

## Testing simple function

```{r}
decide_number(0)
```

```{r}
#| eval: false
decide_number(c(-2, 5))
```

`Returns: the condition has length > 1 and only the first element will be usedthe condition has length > 1 and only the first element will be used[1] "-2 is less than zero" "5 is less than zero"`

## Simple function on vectors

-   Doing it the R way (with vectors)

. . .

```{r}
decide_numvec <- function(x) {
  stopifnot(is.numeric(x))
  x_g <- x > 0
  x_l <- x < 0
  x_ans <- case_when(
    x_g == TRUE~ paste(x, "is greater than zero"),
    x_l == TRUE ~ paste(x, "is less than zero"),
    !(x_g | x_l) == TRUE ~ paste(x, "is zero")
  )
  x_ans
}
```

## Testing with vectors

```{r}
# testing
decide_numvec(10)
decide_numvec(-2)
decide_numvec(0)
decide_numvec(c(10, -2, 0))
```

## Example; `show_head_tail()`

-   Function that gives us head, tail, and NAs
-   Start with a very simple function
-   Add features only when we have the simple one working

## Define my_df

```{r}
set.seed(333)
my_df <- tibble(
  x = rnorm(10, mean = 100, sd = 10),
  y = runif(10, min = 30, max = 130),
  z = rlnorm(10, 2, 2)
)
```

## Example; `show_head_tail()`

```{r simple_show_head_tail}
# head and tail for dataframes
show_head_tail <- function(a_df) {
  h = head(a_df, n = 3)
  t = tail(a_df, n = 3)
  rbind(h, t)
}
show_head_tail(my_df)
```

## Example; `show_head_tail()`

-   Add support for vectors

. . .

```{r}
show_head_tail <- function(df_or_vec) {
  stopifnot(is.data.frame(df_or_vec) | is.vector(df_or_vec))
  h = head(df_or_vec, n = 3)
  t = tail(df_or_vec, n = 3)
  rbind(vec_head = h, vec_tail = t)
}
show_head_tail(my_df$x)
```

## Example; `show_head_tail()`

-   Add support for selecting `n`
-   Start better printing for df
    -   Printing of vectors ok
    -   For df we have to indicate what is head and what is tail
    -   How should we report number of NAs?

## Example; `show_head_tail()`{.smaller}

```{r}
show_head_tail <- function(df_or_vec, n = 3) {
  stopifnot(is.data.frame(df_or_vec) | is.vector(df_or_vec))
  h = head(df_or_vec, n = n)
  t = tail(df_or_vec, n = n)
  if(is.vector(df_or_vec)){
    rbind(vec_head = h, vec_tail = t)
  } else {
        rbind(h, t)
  }
}
```

## Testing

```{r}
show_head_tail(my_df$x, n = 2)
show_head_tail(my_df, n = 5)
```

## Example; Full `show_head_tail()`

-   Indicates head and tail for df
-   Implement count of NAs
-   Number the elements for both head and tail

## Example; Full `show_head_tail()`

```{r full_show_head_tail}
show_head_tail <- function(df_or_vec, n = 3) {
    stopifnot(is.data.frame(df_or_vec) | is.vector(df_or_vec))
  h = head(df_or_vec, n = n)
  t = tail(df_or_vec, n = n)
  if(is.vector(df_or_vec)) {
    # vectors
    c = length(df_or_vec)
    snr_na = sum(is.na(df_or_vec))
    nh = as.character(1:n)
    nt = as.character((c-(n-1)):c)
    rbind(element_head = nh, vec_head = h, 
          element_tail = nt, vec_tail = t, num._of_NAs = c(snr_na, rep("-", n - 1)))
  } else {
    # dataframes
    c = dim(df_or_vec)[2]
    l = dim(df_or_vec)[1]
    rh = rep("Head", c)
    rt = rep("Tail", c)
    nna = rep("NAs", c)
    snr_na = apply(df_or_vec, MARGIN = 2, FUN = function(x) sum(is.na(x)))
    ht = rbind(rh, h, rt, t, nna, snr_na)
    ht_row = c("", 1:n, "", (l - (n - 1)):l, "", "")
    cbind(ht_row, ht)
  }
}
```

## Testing

```{r}
tmp <- my_df
tmp[3, 1] = NA; tmp[2, 2] = NA; tmp[3, 2] = NA; tmp[8, 2] = NA
show_head_tail(tmp$y, n = 2)
```

## Testing

```{r}
show_head_tail(tmp, n = 7)
```

## Testing

```{r, eval = FALSE}
# input something that is not vector or datafarme
show_head_tail(show_head_tail)
show_head_tail(plot(x = c(1, 2), y = c(3, 4)))
```

`Gives: Error in show_head_tail(show_head_tail) : is.data.frame(df_or_vec) | is.vector(df_or_vec) is not TRUE`

## Example; Splitting the function

-   `show_head_tail_vec()` for vectors

. . .

```{r show_head_tail_vec}

show_head_tail_vec <- function(df_or_vec, n) {
  # vectors
  h <- head(df_or_vec, n = n)
  t <- tail(df_or_vec, n = n)
  c <- length(df_or_vec)
  snr_na <- sum(is.na(df_or_vec))
  nh <- as.character(1:n)
  nt <- as.character((c - (n - 1)):c)
  rbind(
    element_head = nh, vec_head = h,
    element_tail = nt, vec_tail = t, num._of_NAs = c(snr_na, rep("-", n - 1))
  )
}
```

## Example; Splitting the function

-   `show_head_tail_df()` for dataframes

. . .

```{r show_head_tail_df}
show_head_tail_df <- function(df_or_vec, n) {
  # dataframes
  h <- head(df_or_vec, n = n)
  t <- tail(df_or_vec, n = n)
  c <- dim(df_or_vec)[2]
  l <- dim(df_or_vec)[1]
  rh <- rep("Head", c)
  rt <- rep("Tail", c)
  nna <- rep("NAs", c)
  snr_na <- apply(df_or_vec, MARGIN = 2, FUN = function(x) sum(is.na(x)))
  ht <- rbind(rh, h, rt, t, nna, snr_na)
  ht_row <- c("", 1:n, "", (l - (n - 1)):l, "", "")
  cbind(ht_row, ht)
}
```

## Example; Splitting the function

-   `show_head_tail()` for dataframes and vectors

. . .

```{r}
show_head_tail <- function(df_or_vec, n = 3) {
  if (is.vector(df_or_vec)) {
    show_head_tail_vec(df_or_vec, n)
  } else if(is.data.frame(df_or_vec)) {
    show_head_tail_df(df_or_vec, n)
  } else {
    paste("Input is of type ", class(df_or_vec), ". Only know
          how to handle dataframes and vectors.", sep = "")
  }
}
```

## Final testing

```{r}
show_head_tail_vec(tmp$y, n = 2)
show_head_tail_df(tmp, n = 2)
```

## Final testing

```{r}
show_head_tail(tmp, n = 4)
```

## References
