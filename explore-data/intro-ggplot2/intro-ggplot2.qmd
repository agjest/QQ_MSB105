---
title: "Introduction to ggplot"
author: "ag@hvl.no"
format:
  revealjs:
        theme: simple
        footer: '[MSB105](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
---

## Load packages

-   We start by loading some packages

. . .

```{r setup}
library(ggplot2)
library(tinytex)
library(tidyverse)
library(ggpubr)
```

## Empty plot

```{r}
ggplot(data = mtcars)
```

## Data and mapping

```{r}
ggplot(data = mtcars, mapping = aes(x = disp, y = mpg))
```

## `mapping` in geom_point

```{r}
gg1 <-   ggplot(data = mtcars, mapping = aes(x = disp, y = mpg)) +
  geom_point()

gg2 <-   ggplot(data = mtcars) +
  geom_point(mapping = aes(x = disp, y = mpg))

ggarrange(gg1, gg2, labels = c("mapping = aes in ggplot", "mapping = aes in geom_*"),
          nrow = 1)
```

## ggplot(data, mapping, ...) and geom_point(mapping, data, ...)

```{r}
ggplot() +
  #geom_point has mapping as first argument. We have to use named arguments
  #or switch their order
  geom_point(data = mtcars, mapping = aes(x = disp, y = mpg))
```

## What happens if we use both?

```{r}
## combine aes
gg3 <-   ggplot(data = mtcars, mapping = aes(x = disp, colour = factor(cyl))) +
##  geom_point(data = mtcars, mapping = aes(y = mpg), col = 'blue')
  geom_point(data = mtcars, mapping = aes(y = mpg))
#inherit.aes	= FALSE, overrides the default aesthetics, rather than combining with them.
gg4 <-   ggplot(data =  mtcars, mapping = aes(x = disp, colour = factor(cyl))) +
##  geom_point(data = mtcars, mapping = aes(y = mpg), col = 'blue')
  geom_point(data = mtcars, mapping = aes(x = qsec, y = mpg), show.legend = TRUE, inherit.aes = FALSE)
```

------------------------------------------------------------------------

```{r}
## x = disp removed from ggplot
gg5 <-   ggplot(data = mtcars, mapping = aes(colour = factor(cyl))) +
##  geom_point(data = mtcars, mapping = aes(y = mpg), col = 'blue')
  geom_point(mapping = aes(x = qsec, y = mpg), show.legend = TRUE, inherit.aes = FALSE)

ggarrange(gg3, gg4, gg5, labels = c("inherit.aes = TRUE\n(default)", "inherit.aes = FALSE", "no x = disp\nin ggplot"),
          nrow = 1)
```

## Playing with aes()

```{r}
ggplot() +
  geom_point(data = mtcars, mapping = aes(x = disp, y = mpg, colour = factor(cyl), size = qsec))
```

## Playing with aes()

```{r}
ggplot() +
  geom_point(data = mtcars,
             mapping = aes(x = disp, y = mpg, colour = factor(cyl), alpha = 3.6*(0.25*1609.347)/qsec,
                           shape = factor(ifelse(am, "Man", "Aut"))), size=4) +
  labs(colour = "cyl", alpha = "speed\n(km/h)", shape = "trans-\nmission")
```

## Exercise:

Examine if one of the available aesthetics might do a better job at
showing differences in speed.

```{r, echo = FALSE, eval = FALSE}
ggplot() +
  geom_point(data = mtcars, mapping = aes(x = disp, y = mpg, colour = factor(cyl), size = 3.6*(0.25*1609.347)/qsec, shape = factor(ifelse(am, "Man", "Aut")))) +
  labs(colour = "cyl", size = "speed\n(km/h)", shape = "trans-\nmission")
```

## Exercise:

How do you think the plot below is made?

```{r}
#| echo: false
ggplot() +
  geom_point(data = mtcars, mapping = aes(x = disp, y = mpg, size = 3.6*(0.25*1609.347)/qsec, shape = factor(ifelse(am, "Man", "Aut"))), colour = "Black", stroke = 3, show.legend = FALSE) +
  geom_point(data = mtcars, mapping = aes(x = disp, y = mpg, colour = factor(cyl), size = 3.6*(0.25*1609.347)/qsec, shape = factor(ifelse(am, "Man", "Aut")))) +
  labs(colour = "cyl", size = "speed\n(km/h)", shape = "trans-\nmission")
```

## Adding a `geom_smooth()` layer

::: columns
::: {.column width="40%"}
```{r}
#| eval: false
ggplot() +
  geom_point(
    data = mtcars,
    mapping = aes(
      x = disp,
      y = mpg, 
      colour = factor(cyl), 
      size = 3.6*(0.25*1609.347)/qsec, 
      shape = factor(
        # Note codeing am
        # 0 automatic, 1 manual
        ifelse(
          am, 
          "Aut", 
          "Man"
          )
        )
      )
    ) +
  labs(
    colour = "cyl", 
    size = "speed\n(km/h)", 
    shape = "trans-\nmission"
    ) +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = disp, y = mpg)
    )
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
ggplot() +
  geom_point(
    data = mtcars, 
mapping = aes(x = disp,
              y = mpg, 
              colour = factor(cyl), 
              size = 3.6*(0.25*1609.347)/qsec,
              # autom. is 0, manual 1
              shape = factor(ifelse(am, "Man", "Aut"))
              )
) +
  labs(
    colour = "cyl", 
    size = "speed\n(km/h)", 
    shape = "trans-\nmission"
    ) +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = disp, y = mpg)
    )
```
:::
:::

## Exercise:

Which parameter control the smoothness? Plot again with "half the
smoothness".

```{r}
#| echo: false
#| eval: false
ggplot() +
  geom_point(
    data = mtcars, 
    mapping = aes(
      x = disp, 
      y = mpg, 
      colour = factor(cyl), 
      size = 3.6*(0.25*1609.347)/qsec, 
      shape = factor(ifelse(am, "Man", "Aut"))
      )
    ) +
  labs(
    colour = "cyl", 
    size = "speed\n(km/h)", 
    shape = "trans-\nmission"
    ) +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = disp, y = mpg), 
    span=0.375
    )
```

## Exercise:

Change the confidence interval from 95% to 99%. Will it become narrower
or broader? Then draw both the 95% and 99% confidence interval. How can
we distinguish them?

```{r}
#| echo: false
#| eval: false
ggplot() +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = disp, y = mpg), 
    span = 0.375, 
    level = 0.99, 
    alpha = 0.25
    ) +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = disp, y = mpg), 
    span = 0.375, 
    colour = "blue", 
    alpha = 0.35
    )  +
  geom_point(
    data = mtcars, 
    mapping = aes(
      x = disp, 
      y = mpg, 
      colour = factor(cyl), 
      size = 3.6*(0.25*1609.347)/qsec, 
      shape = factor(ifelse(am, "Man", "Aut")))) +
  labs(
    colour = "cyl", 
    size = "speed\n(km/h)", 
    shape = "trans-\nmission"
    )
```

## Linear model, lm

**Practice exercise:** How can we get *ggplot2* to draw the regression
line? (hint! see help for `geom_smooth()`). Generate the new plot
(concentrate on the plain points and the regression line).

```{r}
#| echo: false
#| eval: false
ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Linear model, rlm

::: columns
::: {.column width="30%"}
```{r}
#| warning: false
#| eval: false
ggplot(
  data = mtcars, 
  mapping = aes(
    x = disp, 
    y = mpg
    )
  ) +
  geom_point() +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  # robust lm
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    )
```
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| warning: false
ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point() +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  # robust lm
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    )
```
:::
:::

## Other data in the plot

```{r}
## create tibble from scratch
df_mean <-   tibble(
  cyl = c("avg. car 4 cyl.", "avg. car 6 cyl.", "avg. car 8 cyl."), 
  mpg = c(22.66, 17.74, 15.10), 
  disp = c(105.14, 183.31, 353.10)
  )
```

```{r}
df_mean
```

## Exercise:

The first column involved some typing. How can we reduce the required
typing? (hint! see `paste()` and `seq()`)

```{r}
#| echo: false
#| eval: false
df_mean <-   tibble(
  cyl = paste("avg. car ", 
              seq(4,8, by = 2), " cyl.", sep = ""), 
  mpg = c(26.7, 19.7, 15.1), 
  disp = c(105.1, 183.3, 353.1)
  )
```

```{r}
df_mean
```

## Two different datasets

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point(
    mapping = aes(colour = factor(cyl))
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    ) +
  geom_point(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg), 
    colour = "black", 
    size = 3
    ) +
  geom_text(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg, label = cyl), 
    colour = "black", 
    vjust = 1.5
    )
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point(
    mapping = aes(colour = factor(cyl))
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    ) +
  geom_point(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg), 
    colour = "black", 
    size = 3
    ) +
  geom_text(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg, label = cyl), 
    colour = "black", 
    vjust = 1.5
    )

```

-   Note `data = df_mean` in last `geom_point()` in the code.
:::
:::

## Two different datasets cont.

::: columns
::: {.column width="50%"}
```{r}
p_common <- ggplot(
  data = mtcars, 
  mapping = aes(x = disp, y = mpg)
  ) +
  geom_point(
    aes(colour = factor(cyl))
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  geom_smooth(
    method = MASS::rlm, 
    colour = 'Red', 
    se = FALSE
    ) +
  geom_point(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg), 
    colour = "black", 
    size = 3
    ) +
  labs(colour = "cyl") +
  theme(legend.position = "bottom")
```
:::

::: {.column width="50%"}
```{r}
# update a ggplot object

# add text labels by geom_text
p1 <- p_common +  
  geom_text(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg, label = cyl),
    colour = "black", 
    vjust = 1.5, 
    hjust = 0.2
    )
# add text labels by geom_label
p2 <-   p_common +  
  geom_label(
    data = df_mean, 
    mapping = aes(x = disp, y = mpg, label = cyl), 
    colour = "black", 
    vjust = 1.5, 
    hjust = 0.2, 
    alpha = 0.25
    ) +
  theme(legend.position = "bottom") +  
  labs(colour = "cyl")
```
:::
:::

## Plot two ggplot objects p1 and p2

```{r}
#| eval: false
# ggpubr makes it easy to place 
# two objects side by side
ggarrange(
  p1, 
  p2, 
  ncol = 2, 
  nrow = 1, 
  labels = c(
    "geom_text()",
    "geom_label()"
    )
  )
```

## Plot two ggplot objects p1 and p2 cont.

```{r}
#| echo: false
# ggpubr makes it easy to place 
# two objects side by side
ggarrange(
  p1, 
  p2, 
  ncol = 2, 
  nrow = 1, 
  labels = c(
    "geom_text()",
    "geom_label()"
    )
  )
```

## Three variables

-   pseudo 3-d plot (not to usefull)
-   2-d + aesthetics

## Three variables cont.

::: columns
::: {.column width="40%"}
```{r}
cp1 <-   ggplot() +
  geom_point(
    data = mtcars, 
    mapping = aes(
      x = hp, 
      y = wt,
      colour = 1609.347/(2*qsec^2)
      ),
    size = 4) +
  geom_text(
    data = mtcars, 
    mapping = aes(x = hp, y = wt, label = rownames(mtcars)),
    colour = "black", 
    size = 2, 
    hjust = 0.7, 
    vjust = 3
    ) +
  labs(
    size = "Average\nacceleration", 
    colour = "Average\nacceleration"
    ) +
  geom_smooth(
    data = mtcars, 
    mapping = aes(x = hp, y = wt), 
    method = "lm", 
    se = FALSE
    ) +
  theme_classic()
#  scale_size_continuous(range = c(3, 12), 
#  breaks = seq(1, 5, by=0.25)) +
```
:::

::: {.column width="60%"}
```{r}
#| echo: false
cp1
```
:::
:::

## Three variables cont.

::: columns
::: {.column width="35%"}
```{r}
bp1 <- ggplot() +
  geom_point(
    data = mtcars, 
    mapping = aes(x = hp, y = wt, size = 1609.347/(2*qsec^2)), 
    colour = "blue", 
    alpha = 0.25
    ) +
  geom_text(
    data = mtcars, 
    mapping = aes(x = hp, y = wt, label = rownames(mtcars)),
    colour = "black", 
    size = 2, 
    hjust = 0.5, 
    vjust = 3
    ) +
  labs(size = "Average\nacceleration") +
  scale_size_continuous(
    range = c(1, 10),
    breaks = seq(1, 5, by = 0.25)
    ) +
  theme_classic()
```
:::

::: {.column width="65%"}
```{r}
#| echo: false
bp1
```
:::
:::

## Another strategy; facets

::: columns
::: {.column width="35%"}
```{r}
#| eval: false
ggplot(
  data = mtcars, 
  mapping = aes(
    x = hp, 
    y = 1609.347/(2*qsec^2)
    )
  ) +
  facet_wrap(~cut_number(wt, n =3)) +
  geom_point(
    aes(colour = cut_number(
      wt, 
      n = 3)
      )
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    )
```
:::

::: {.column width="65%"}
```{r}
#| echo: false
ggplot(
  data = mtcars, 
  mapping = aes(
    x = hp, 
    y = 1609.347/(2*qsec^2)
    )
  ) +
  facet_wrap(~cut_number(wt, n =3)) +
  geom_point(
    aes(colour = cut_number(
      wt, 
      n = 3)
      )
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    )
```
:::
:::

## Facets, whole dataset in background

```{r}
#| eval: false
#new dataframe to use for the grey points
hp_acc <- data.frame(
  hp = mtcars$hp, 
  acc = 1609.347/(2*mtcars$qsec^2)
  )

ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), colour = "grey80"
    ) +
  facet_wrap(
    ~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy")
      )
    ) +
  geom_point(
    mapping = aes(colour = cut_number(
      wt, 
      n = 3, 
      labels = c("Light", "Medium", "Heavy")
      )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration (m/s^2)", 
    colour = "Weight"
    )
```

## Facets, whole dataset in background

```{r}
#| echo: false
#new dataframe to use for the grey points
hp_acc <- data.frame(
  hp = mtcars$hp, 
  acc = 1609.347/(2*mtcars$qsec^2)
  )

ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), colour = "grey80"
    ) +
  facet_wrap(
    ~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy")
      )
    ) +
  geom_point(
    mapping = aes(colour = cut_number(
      wt, 
      n = 3, 
      labels = c("Light", "Medium", "Heavy")
      )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration (m/s^2)", 
    colour = "Weight"
    )
```

## Two facet variables

```{r}
#| eval: false
ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), 
    colour = "grey80"
    ) +
  facet_grid(
    factor(cyl)~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy"))
    ) +
  geom_point(
    mapping = aes(
      colour = cut_number(
        wt, 
        n = 3, 
        labels = c("Light", "Medium", "Heavy")
        )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration", 
    colour = "Weight"
    )
```

## Two facet variables

```{r}
#| echo: false
ggplot(
  data = mtcars, 
  mapping = aes(x = hp, y = 1609.347/(2*qsec^2))
  ) +
  geom_point(
    data = hp_acc, 
    mapping = aes(x = hp, y = acc), 
    colour = "grey80"
    ) +
  facet_grid(
    factor(cyl)~cut_number(
      wt, 
      n =3 , 
      labels = c("Light", "Medium", "Heavy"))
    ) +
  geom_point(
    mapping = aes(
      colour = cut_number(
        wt, 
        n = 3, 
        labels = c("Light", "Medium", "Heavy")
        )
      ),
    show.legend = FALSE
    ) +
  geom_smooth(
    method = "lm", 
    se = FALSE
    ) +
  labs(
    y = "Mean acceleration", 
    colour = "Weight"
    )
```

## Other graphical systems in R

-   Classic (`plot()`)
-   Lattice package
-   many more

## Lattice

```{r}
library(lattice)
histogram(
  x = ~mpg | factor(cyl),  
  type = "density", 
  data = mtcars
  )
```

## Classic

```{r}
#save old par values
old.par <-   par(no.readonly = TRUE)
#set par
layout(
  matrix(
    c(1,2,3), 
    nrow = 1, 
    ncol = 3, 
    byrow = TRUE
    )
  )
with(
  subset(
    mtcars, 
    cyl == 4), 
  hist(
    mpg, 
    breaks = c(7, 12, 17, 22, 27, 32, 37), 
    freq = FALSE
    )
  )
with(
  subset(mtcars, cyl == 6), 
  hist(
    mpg, 
    breaks = c(7, 12, 18, 23, 27, 32, 37), 
    freq = FALSE
    )
  )
with(
  subset(
    mtcars, 
    cyl == 8
    ), 
  hist(
    mpg, 
    breaks = c(9, 14, 19, 24, 27, 32, 37), 
    freq = FALSE
    )
  )
```

## Classic cont.

```{r}
# reset pat to old values
par(old.par)
```

## One variable

-   Histogram
-   Boxplot
-   Density plot
-   Violin plot
-   and more

```{r}
#| echo: false
#siste
```
