---
title: "Import/Export Data"
author: "ag@hvl.no"
format:
  revealjs:
        theme: simple
        footer: '[MSB105](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
bibliography: ag_ds.bib
nocite: '@*'
---

```{r setup}
library(tidyverse)
library(PxWebApiData)
```

```{r bib, include=FALSE}
# create a bib file for the R packages 
# used in this document
# Note! Needs to do a touch(ag_ds.bib) in terminal before first run
# else stops when bibliography: "ag_ds.bib" not found in YAML
knitr::write_bib(c(
  "base",
  "rmarkdown",
  "tufte",
  "tidyverse",
  "PxWebApiData",
  "nycflights13",
  "readxl",
  "readr"
),
file = "ag_ds.bib"
)
```

## Getting data from external source. (chap. 11)

-   We will download some data from SSB.
-   We will get data from [ssb tab.
    10540](https://www.ssb.no/statbank/table/10540/) which gives us
    percentage of the workforce (split on age-group) that is unemployed.
-   We will get data for municipalities in Rogaland in the period Jan.
    1999 to Dec. 2002

## Getting data from external source. (chap. 11) cont.

![Registrerte ledige 15--74 Ã¥r](RegLedige15-74-web.png)The SSB web page.

## Getting data from external source. (chap. 11) cont.

-   We can get the data into R in (at least) two ways:
    1)  Use SSB web-app to select part of tables (up to 300000 cells
        max)
    2)  Use the SSB api (up to 800000 cells max)

## SSB web-app

We can use the web-pages of SSB and download the data as .xlsx format
and use the `read_xlsx()` function from the `readxl` package,
[@R-readxl]

Generate the table in xlsx-format

![The .xlsx File.](RegLedige15-74-xlsx.png)

## SSB web-app cont.

-   As .csv

. . .

![The csv file RegLedige15-74-web-csv](RegLedige15-74-web-csv.png)

## SSB web-app cont.

Note that:

-   decimal point is ',' and not '.' in "Norwegian .csv files"
    -   decimal point in SSB semicolon separated files seems to be '.'
-   ';', not ',', is used to separate values in "Norwegian .csv files"
-   To read the data into R we will use the classic functions from the
    `util` package `read.table()` and `read.csv2()`.
    -   The `read_table()` and `read_csv2()` functions are "modern"
        equivalents of these classics.
-   We use `read.table` since it's possible to specify `dec = ""` and
    `sep = ""`.
    -   `read.csv2` is a form of `read.table()` that already uses these
        options.

    -   The modern ones uses `locale()`, but I could not get it to work
        properly.

## SSB web-app cont.

-   Under `Environment` in the upper right pane i R Studio there is also
    an `Import Dataset` menu.
-   Note that it gives an error for the .csv file ("multibyte
    character").

## Read Excel file

-   The `Tidyverse` library does not load the `readxl` package.
    -   To use the `read_xlsx()` function we will either have to use
        `readxl::read_xlsx()` or first load the `readxl` package with
        `library(readxl)`
-   put the `library()` commands in an r-chunk called *setup* at the
    very start of your notebook.
    -   The chunk named *setup* will be run *every time* you render the
        quarto document.
-   If you haven't got the `readxl` package you have to install it
    first.

## Read Excel file cont.

```{r read-excel-file}
RegHeltLedige <- readxl::read_excel(
  path = "RegHeltLedige.xlsx", 
  sheet = "RegHeltLedige",
  skip = 1
  )
# Have a look at the names generated
names(RegHeltLedige)
```

## Read Excel file cont.

-   Check head of file. 15 first lines.

. . .

```{r}
head(RegHeltLedige, n = 15)
```

## Read Excel file cont.

-   Check head of file, where age_group change. Lines 45:55.

. . .

```{r}
print(RegHeltLedige[c(1:5, 45:55),], n = 20)
```

## Read Excel file cont.

-   We must fix variable names

-   We must fill in for NAs in municipality names and age group

    . . .

```{r}
names(RegHeltLedige) <- c("knr_kname", "age_group", "year_month", "unempl")
head(RegHeltLedige, n = 3)
```

## Read Excel file cont.

```{r}
# Fill in for NA
RegHeltLedige <- fill(
  data = RegHeltLedige,
  # column to fill, Note use of c() when multiple columns
  c(knr_kname, age_group),
  # NOTE! .direction, NOT direction
  .direction = "down")
```

## Read Excel file cont.

-   Re-check head of file

. . .

```{r}
print(RegHeltLedige[c(1:5, 45:55),], n = 20)
```

-   Ok, NAs filled in

## Read Excel file cont.

```{r}
head(as.data.frame(RegHeltLedige), n =200)
```

## Write .xlsx files

-   Be future proof, write .csv files
-   `readxl` packages does not have any `write*()` function
-   If you really have to write out an Excel worksheet try the `writexl`
    package

## Read .csv (Comma Separated Values) file

-   In Norway we use "," as decimal sign.
    -   Not "."
-   Hence our .csv files is really *semicolon* separated values.
-   We skip the first 3 lines and use the fourth as "header", i.e. as
    variable names
-   SSB seems to be serving the files with iso-8859-1 encoding (or is it
    CP-1252?).
    -   ![File -I command in Terminal](Terminal-File-I.png)

    -   The command might be `file -i` on linux and windows

    -   Those that find this very interesting might check out
        [Windows-1252](https://en.wikipedia.org/wiki/Windows-1252)

        -   Thank God for unicode

## Read csv file with encoding

-   Select readr from the Import Dataset drop-down menu in the
    Environment pane in the upper right corner.
-   This menu selection uses the **readr** package [@R-readr].

. . .

![Import Dataset from Environment Pane.](env-import-data.png)

## Read csv file with encoding cont.

![Readr error. Hit Return/Enter or click
OK.](readr-prob.png){width="574"}

-   This doesn't look to good.

## Read csv file with encoding cont.

-   Click **Locale: Configure...**
-   Change:
    1.  Encoding to ISO-8859-1

    2.  SSB .csv download seems to be using '.' as decimal marker
-   Click **Configure**

## Read csv file with encoding cont.

![Wrong encoding, i.e. UTF. Change it to ISO-8859-1.](readr-enc2.png)

## Read csv file with encoding cont.

![Changed encoding](readr-enc3.png)

## Read csv file with encoding cont.

![Fixed readr problem.](readr-fixed.png)

## Read csv file with encoding cont.

-   Copy code and make sure that `library(readr)` is in the setup chunk.

. . .

![Copy the code into document.](readr-fixed-copy-code.png)

## Read csv file with encoding update

-   Code to read .csv file from SSB

. . .

```{r}
my_data <- read_delim(
  # Change the file argument
  file = "RegHeltLedige.csv",
  delim = ";",
  escape_double = FALSE,
  locale = locale(encoding = "ISO-8859-1"),
  trim_ws = TRUE, 
  skip = 1,
  show_col_types = FALSE
  )
```

## Read csv file with encoding update

```{r}
head(my_data)
```

## Read csv file with encoding update

```{r}
summary(my_data)
```

## SSB api (`PxWebApiData`)

-   We can also use the api provided by SSB together with the package
    `PxWebApiData` and download the data directly into R.

-   See [ApiData tutorial](https://ssbviz.shinyapps.io/ApiData/) for a
    simple introduction to the ApiData function in the *PxWebApiData*
    package.

-   The *Introduction to PxWebApiData* vignette to the *PxWebApiData*
    package is also a nice introduction.

## Check metadata 10540 table

```{r metadata}
metadata_10540 <- ApiData(
  "http://data.ssb.no/api/v0/en/table/10540",
  returnMetaFrames = TRUE
  )
```

## Check metadata 10540 table cont

![Metadata SSB table 10540](metadata-10540.png)

## Check variables 10540 table

```{r}
#Get more info about table
ApiData(
"http://data.ssb.no/api/v0/en/table/10540",
returnApiQuery = TRUE
) 
```

## Read 10540 table

```{r}
unemp99to02 <- ApiData(
  "http://data.ssb.no/api/v0/en/table/10540",
  # Have not been able to specify more complex regions
  Region = list("11*"),
  Tid = c(paste(
    rep(1999:2002, each = 12), 
    "M",
    sprintf("%02d", 1:12), 
    sep = "")
    )
  )
```

## Read 10540 table

What is returned by `Region = list("11*")`?

```{r}
# Note the two $ signs
unique(unemp99to02$`10540: Unemployed persons registered at the Employment Office (per cent), by region, age, contents and month`$region)[1:10]
```

## Read 10540 table

-   Check structure of result

. . .

![Structure of the answer from SSB server.](structure-result.png)

## Bind dataframes

-   We see that what's returned is a list with two element
-   The elements are

. . .

```{r}
is.data.frame(unemp99to02$`10540: Unemployed persons registered at the Employment Office (per cent), by region, age, contents and month`)
```

. . .

```{r}
is.data.frame(unemp99to02$dataset)
```

## Bind dataframes

-   Bind the two dataframes together.
-   Each row is for the same observation (in both dataframes).

. . .

```{r}
# one labels df and one values df, cbind them
unemp99to02_df <- cbind(
  unemp99to02[[1]], 
  unemp99to02[[2]]
  )
head(unemp99to02_df, n = 5)
```

## Bind dataframes

![Structure of the new dataframe.](structure-df.png)

## Bind dataframes

-   We pick the variables we need in the order we want them.

. . .

```{r}
#pick and order variables. Pick them by name.
unemp99to02 <- unemp99to02_df[, c(
  "Region",
  "region",
  "month",
  "age",
  "value"
)]
```

## Set the names we want

-   Give the variables names we like.

. . .

```{r}
names(unemp99to02)
# new variable names
names(unemp99to02) <- c(
  "knr",
  "knavn",
  "y_m",
  "age",
  "unemp"
)
```

## Write the data as a csv file.

-   Write data out to disk.
-   It is recommended to save data as .csv files (pure text) to be
    future proof.
-   Check that it looks OK

. . .

```{r}
# Check that it looks OK
head(unemp99to02, n = 5)
```

## Write the data as a csv file cont.

-   Check that the dimensions seems reasonable.

. . .

```{r}
dim(unemp99to02)

```

-   Write the data in international CSV format.
    -   Decimal separator: .

    -   Value separator: ,

. . .

```{r}
# save it as csv
write.table(unemp99to02,
  file = "tmp.csv",
  dec = ".",
  sep = ","
)

```

```{r}
#| echo: false
# siste
```

## References
