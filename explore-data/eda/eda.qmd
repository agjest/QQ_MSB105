---
title: "Exploratory Data Analysis (EDA)"
author: "ag@hvl.no"
format:
  revealjs:
        theme: simple
        footer: '[MSB105](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
bibliography: eda.bib
nocite: '@*'
---

## Packages used

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(nycflights13)
library(gridExtra)
library(modelr)
library(grid)
library(ggplotify)
library(vtable)
library(flextable)
```

## Generate References for Packages used

```{r bib}
# create a bib file for the R packages 
# used in this document
# Note! Needs to do a touch(eda.bib) in terminal before first run
# else stops when bibliography: "eda.bib" not found in YAML
packs <- c("tidyverse", "nycflights13", "gridExtra",
           "modelr", "grid", "ggplotify", "vtable", "flextable")
knitr::write_bib(
  packs,
  file = "eda.bib"
  )
rm(packs)
```

## Chapter 6; Workflow

-   Not all to relevant for us since we use Quarto Documents,
-   but some important points
-   **Cmd + Return/Ctrl + Enter** runs *current* statement and jumps to
    next statement
-   Selecting some statements and hitting **Cmd + Return/Ctrl + Enter**
    will run the selected statements.
    -   Nice for debugging pipes
    -   Be very careful when you select the statements
    -   Missing a ')' or a '"' can bring a lot of hurt.
    -   If sh\*t happens, ESC is your best friend

## Exploratory Data Analysis (r4ds chap. 7)

General reflection up on the concept of *Exploratory Data Analysis*. You
will find details and more code in [chapter 7 of
r4ds](https://r4ds.had.co.nz/exploratory-data-analysis.html).

-   Getting to know your data
    -   Variation **in** variables
    -   Variation **between** variables

## Some definitions

-   **Variable:** some quality of the underlying phenomenon that one can
    measure
-   **Value:** the recorded number or category resulting from the
    measurement
-   **Observation:** a set of measurements of the underlying phenomenon
    -   same time
    -   same object
-   **Tabular data** Listing of variables, observations and values
-   **Tidy tabular data:** Tabular data where
    -   each variable is in a column,
    -   each observation in a row and
    -   each cell in the table contains **one** value

## Single variable, load data {.smaller}

::: columns
::: {.column width="50%"}
-   Load the data

```{r load-data}
my_heights <- modelr::heights
```

-   Any NAs?

```{r}
#| paged.print: false
# NAs in my_heights?
my_heights %>% 
  apply(MARGIN = 2, FUN = is.na) %>% 
  apply(MARGIN = 2, FUN = sum) |> 
  print(width = 40)
```
:::

::: {.column width="50%"}
-   or

```{r}
# NAs in my_heights?
my_heights %>% 
  is.na() %>% 
  apply(MARGIN = 2, FUN = sum)  |> 
  print(width = 40)
```
:::
:::

## Single variable, load data cont.

::: columns
::: {.column width="50%"}
Nicer solution

```{r}
# number of NAs in each variable
# drop variables with no NA
my_heights %>% 
  is.na() %>% 
  colSums() |> 
  print(width = 40)
```
:::

::: {.column width="50%"}
or

```{r}
# number of NAs in each variable
# drop variables with no NA
my_heights %>% 
  is.na() %>% 
  colSums() %>% 
  .[. > 0]
```
:::
:::

## Descriptive Statistics

Describe data by tables showing:

-   Different statistics (characteristics) of the data
    -   Number of obs.
    -   Number of missing values
    -   Minimum value
    -   Maximum value
    -   Mean
    -   Dispersion
        -   Standard deviation
        -   Variance
        -   Percentiles

## Descriptive Statistics ex. my_heights

-   Splits variables into two tables

. . .

::: columns
::: {.column width="30%"}
```{r}
#| echo: true
#| eval: false
# package vtable 
# must be installed
my_heights %>% 
  select(
    -marital, 
    -sex
    ) %>% 
  # . to stop RStudio 
  # complaining about 
  # no data
  vtable::st(data = ., out = "return") |> 
  as_flextable()
```
:::

::: {.column width="70%"}
```{r}
#| label: tbl-first
#| tbl-cap: "Numeric variables."
#| echo: false
#| eval: true
# package vtable 
# must be installed
my_heights %>% 
  select(
    -marital, 
    -sex
    ) %>% 
  # . to stop RStudio 
  # complaining about 
  # no data
  vtable::st(data = ., out = "return") |> 
  as_flextable()
```
:::
:::

## Descriptive Statistics ex. my_heights {.smaller}

::: columns
::: {.column width="30%"}
```{r}
#| echo: true
#| eval: false
# package vtable must 
# be installed
my_heights %>% 
  select(marital, sex) %>% 
  vtable::st(
    data = ., 
    out = "return"
    ) |> 
  as_flextable()
```
:::

::: {.column width="70%"}
```{r}
#| label: tbl-second
#| tbl-cap: "Category variables."
#| echo: false
#| eval: true
# package vtable must be installed
my_heights %>% 
  select(marital, sex) %>% 
  vtable::st(
    data = ., 
    out = "return"
    ) |> 
  as_flextable()
```
:::
:::

## A simpler alternative

-   use `use_df_printer()` from the `flextable` package
-   will print `dataframes/tibbles` nicely
-   the option `out = "return"` to `st()` ensures that a `dataframe` is
    returned

. . .

```{r}
#| output-location: column
# next line gives dataframe/tibble
# as flextable
use_df_printer()
my_heights %>% 
  select(marital, sex) %>% 
  vtable::st(out = "return") 
```

## Descriptive Statistics ex. my_heights

::: columns
::: {.column width="35%"}
```{r}
#| eval: false
#| echo: fenced
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  select(-marital) %>% 
  vtable::st(
    group = 'sex',
    group.long = TRUE,
    out = "return"
    )
```
:::

::: {.column width="65%"}
```{r}
#| eval: true
#| echo: false
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  select(-marital) %>% 
  vtable::st(
    group = 'sex',
    group.long = TRUE,
    out = "return"
    )
```
:::
:::

## Desc. Stat. ex. my_heights {.smaller}

::: columns
::: {.column width="35%"}
married/unmarried women

```{r}
#| eval: false
#| echo: fenced
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'female') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    out = "return"
    )
```
:::

::: {.column width="65%"}
```{r}
#| label: tbl-married-women
#| tbl-cap: "Difference between married an unmarried women."
#| echo: false
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'female') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    # summ = c("notNA(x)" ,"mean(x)", "sd(x)"),
    # summ.names = c("N", "Mean", "SD"),
    # factor.numeric = TRUE,
    out = "return"
    )
```
:::
:::

## Less info. married/unmarried women

::: columns
::: {.column width="45%"}
```{r}
#| eval: false
#| echo: fenced
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'female') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    summ = c("notNA(x)" , "mean(x)", 
             "sd(x)"),
    summ.names = c("N", "Mean", "SD"),
    out = "return"
    )
```
:::

::: {.column width="55%"}
```{r}
#| label: tbl-married-women-simple
#| tbl-cap: "Difference between married an unmarried women. Simplified table."
#| echo: false
#| ft_max_row: 15
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'female') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    summ = c("notNA(x)" ,"mean(x)", "sd(x)"),
    summ.names = c("N", "Mean", "SD"),
    out = "return"
    )
```
:::
:::

## Desc. Stat. ex. my_heights {.smaller}

::: columns
::: {.column width="35%"}
married/unmarried men

```{r}
#| eval: false
#| echo: fenced
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'male') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    out = "return"
    )
```
:::

::: {.column width="65%"}
```{r}
#| label: tbl-married-men
#| tbl-cap: "Difference between married an unmarried men."
#| echo: false
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'male') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    # summ = c("notNA(x)" ,"mean(x)", "sd(x)"),
    # summ.names = c("N", "Mean", "SD"),
    # factor.numeric = TRUE,
    out = "return"
    )
```
:::
:::

## Less info. married/unmarried men

::: columns
::: {.column width="45%"}
```{r}
#| eval: false
#| echo: fenced
#| ft_max_row: 15
# Default for ft_max_row is 10
# so just first 10 lines will
# be printed
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'male') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    summ = c("notNA(x)" , "mean(x)", 
             "sd(x)"),
    summ.names = c("N", "Mean", "SD"),
    out = "return"
    )
```
:::

::: {.column width="55%"}
```{r}
#| label: tbl-married-men-simple
#| tbl-cap: "Difference between married an unmarried men. Simplified table."
#| echo: false
#| ft_max_row: 15
use_df_printer()
my_heights %>% 
  mutate(
    married = if_else(
      marital == 'married', 
      TRUE, 
      FALSE
      )
    ) %>% 
  filter(sex == 'male') %>% 
  select(-sex, -marital) %>% 
  vtable::st(
    group = "married",
    group.long = TRUE,
    summ = c("notNA(x)" ,"mean(x)", "sd(x)"),
    summ.names = c("N", "Mean", "SD"),
    out = "return"
    )
```
:::
:::

## Single variable graphical description, bar chart

Simplest is bar-chart

::: columns
::: {.column width="40%"}
```{r}
#| echo: true
#| eval: false
ggplot(data = my_heights) +
  geom_bar(
    mapping = aes(
      x = education
      ), 
    na.rm = TRUE
    ) +
   theme(
     axis.text = element_text(
       size = 15
       ),
    axis.title = element_text(
       size = 15
       )
   )
```
:::

::: {.column width="60%"}
```{r}
#| label: fig-bar-chart-edu
#| fig-cap: "Bar chart of education."
#| echo: false
#| eval: true
ggplot(data = my_heights) +
  geom_bar(
    mapping = aes(
      x = education
      ), 
    na.rm = TRUE
    ) +
   theme(
     axis.text = element_text(
       size = 15
       ),
    axis.title = element_text(
       size = 15
       )
   )
```
:::
:::

## The peaks?

-   What is the reason behind the peak at 12 years?
    -   High-school
-   What is the reason behind the peak at 14 years?
    -   2 year trade college
-   What is the reason behind the peak at 16 years?
    -   4 year college

## Single variable, i.e. variation in a variable

-   Example: How does income vary in the `modelr::heights` dataset?
    -   Does someone have zero income?
    -   How to display the variable?
        -   histogram;
            -   `hist(my_df$var_name, breaks = 20)` or
                `geom_histogram()` from ggplot
            -   density/violin plot
-   Be aware of outliers?
    -   Might be difficult to spot in a histogram

## `hist()` and `geom_histogram()`

```{r}
#| label: fig-two-hist
hist1 <- ggplotify::as.ggplot(~hist(my_heights$income, breaks = 20))
hist2 <- ggplot(my_heights, mapping = aes(x = income)) +
  geom_histogram(bins = 20)

gridExtra::grid.arrange(hist1, hist2, ncol = 2)
```

## `geom_histogram()` other variables

```{r}
#| echo: true
#| eval: false
hist3 <- ggplot(my_heights, mapping = aes(x = income)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist4 <- ggplot(my_heights, mapping = aes(x = height)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist5 <- ggplot(my_heights, mapping = aes(x = weight)) +
  geom_histogram(bins = 40, na.rm = TRUE)
gridExtra::grid.arrange(hist3, hist4, hist5, nrow = 1)
```

## `geom_histogram()` other variables

```{r}
#| echo: false
hist3 <- ggplot(my_heights, mapping = aes(x = income)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist4 <- ggplot(my_heights, mapping = aes(x = height)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist5 <- ggplot(my_heights, mapping = aes(x = weight)) +
  geom_histogram(bins = 40, na.rm = TRUE)
gridExtra::grid.arrange(hist3, hist4, hist5, nrow = 1)
```

## `geom_histogram()` other variables

```{r, eval = FALSE}
hist6 <- ggplot(my_heights, mapping = aes(x = age)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist7 <- ggplot(my_heights, mapping = aes(x = education)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist8 <- ggplot(my_heights, mapping = aes(x = afqt)) +
  geom_histogram(bins = 40, na.rm = TRUE)
gridExtra::grid.arrange(hist6, hist7, hist8, nrow = 1)
```

## `geom_histogram()` other variables

```{r, echo = FALSE}
hist6 <- ggplot(my_heights, mapping = aes(x = age)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist7 <- ggplot(my_heights, mapping = aes(x = education)) +
  geom_histogram(bins = 40, na.rm = TRUE)
hist8 <- ggplot(my_heights, mapping = aes(x = afqt)) +
  geom_histogram(bins = 40, na.rm = TRUE)
gridExtra::grid.arrange(hist6, hist7, hist8, nrow = 1)
```

## Variation in a variable, given another variable

-   We can use the facet feature of `ggplot`

## `geom_density()`; faceted on sex

-   Distribution of income
    -   Three levels of education
        -   \[0-12) "NotHS",
        -   \[12-14) "NotTC",
        -   \[14-16) "NotC",
        -   \[16-21\] "C+")
    -   Faceted on the `sex` variable
    -   Use the `cut` function to make the categories
    -   Have to use `right = FALSE` to get open interval on the right

## `geom_density()`; faceted on sex

```{r}
#| eval: false
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(!is.na(edu_fac) & income > 0) %>%
  ggplot(mapping = aes(x = income, fill = edu_fac, colour = edu_fac)) +
  geom_density(alpha = 0.2, na.rm = TRUE) + 
  facet_wrap(~sex)
```

## `geom_density()`; faceted on sex

```{r}
#| label: fig-facet-sex-code
#| echo: false
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(!is.na(edu_fac) & income > 0) %>%
  ggplot(mapping = aes(x = income, fill = edu_fac, colour = edu_fac)) +
  geom_density(alpha = 0.2, na.rm = TRUE) + 
  facet_wrap(~sex)
```

## `geom_density()`; facet edu_fac

-   Perhaps better to facet on education

. . .

```{r}
#| label: fig-facet-edu-fac-code
#| eval: false
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(!is.na(edu_fac) & income > 0) %>%
  ggplot(mapping = aes(x = income, fill = sex, colour = sex)) +
  geom_density(alpha = 0.2, na.rm = TRUE) + 
  facet_wrap(~edu_fac)
```

## `geom_density()`; facet edu_fac

```{r}
#| label: fig-facet-edu-fac-plot
#| echo: false
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(!is.na(edu_fac) & income > 0) %>%
  ggplot(mapping = aes(x = income, fill = sex, colour = sex)) +
  geom_density(alpha = 0.2, na.rm = TRUE) + 
  facet_wrap(~edu_fac) 
```

## Income equal to 0?

```{r}
my_heights %>% 
  dim()
```

. . .

```{r}
my_heights %>% 
  filter(income < 1) %>% 
  dim()
```

## Income equal to 0?

```{r}
#| output-location: column
my_heights %>% 
  filter(income < 1) %>%
  select(sex) %>%
  group_by(sex) %>%
  table() 
```

## Income equal to 0?

-   No income, grouped by sex and edu_fac

. . .

```{r}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income < 1) %>%
  select(sex, edu_fac) %>%
  group_by(sex) %>%
  table()
```

## Boxplot

```{r boxplot_code, eval = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0) %>% 
  ggplot(mapping = aes(x = edu_fac, y = income)) +
  facet_wrap(~sex) + 
  geom_boxplot()
```

## Boxplot

```{r boxplot_plot, echo = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0) %>% 
  ggplot(mapping = aes(x = edu_fac, y = income)) +
  facet_wrap(~sex) + 
  geom_boxplot()
```

## Boxplot code, turned 90

```{r boxplot_plot_code_flip, eval = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0) %>% 
  ggplot(mapping = aes(x = edu_fac, y = income)) +
  facet_wrap(~sex) + 
  geom_boxplot() + 
  coord_flip()
```

## Boxplot plot, turned 90

```{r boxplot_plot_plot_flip, echo = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0) %>% 
  ggplot(mapping = aes(x = edu_fac, y = income)) +
  facet_wrap(~sex) + 
  geom_boxplot() +
  coord_flip()
```

## How to treat bad data

-   Outliers?
    -   Real outliers or faulty registration?
-   What to do?
    -   To just delete the observation is seldom the right solution

    -   Document what you do!

    -   If you suspect faulty data entry/registration change value to NA

## How to treat bad data cont.

-   What to do? cont.
    -   In some rare cases it might be acceptable to edit the data

        -   if you have very few observations

        -   can give a very plausible explanation for the faulty entry.
            Document **very** carefully.

        -   Ex. percentage unemployed timeseries: 2,3%, 3,7% ... 270%
            ... 4,1%.

            -   If you can argue that 2,7 probably has been entered
                instead of 0,027 it **might** be defensible to edit the
                observation, but normally you should change it to NA and
                document your edit.

    -   Do not use `na.rm = TRUE` in `ggplot` before last edit.

        -   Make sure that you have thoroughly documented the missing
            values.

        -   `ggplot` is nice and warns you about missing values and
            tells you how many there are.

## How to treat bad data cont.

-   With real outliers
    -   Explanation. Is there a missing variable?
    -   Do the analysis with and without the outliers. If similar
        results not to much of a problem, if not ...

## Quiz

From r4ds. Use help (?)

> 1)  How are NAs handled in `geom_histogram()`?
> 2)  How are NAs handled in `geom_bar()`?
> 3)  How are NAs handled in `sum` and `mean`

## Answer Quiz

```{r}
#| eval: false
#| echo: true
set.seed(999)
my_data <- tibble(val = c(round(runif(97, 1, 10), 0), rep(NA, 3)))
g <- ggplot(my_data, mapping = aes(x = val)) 
g1 <- g + geom_histogram()
g2 <- g + geom_bar()
gridExtra::grid.arrange(g1, g2, ncol = 2)
sum(my_data$val); mean(my_data$val)
sum(my_data$val, na.rm = TRUE); mean(my_data$val, na.rm = TRUE)
```

## Answer Quiz

```{r}
#| eval: true
#| echo: false
#| warnings: true
set.seed(999)
my_data <- tibble(val = c(round(runif(97, 1, 10), 0), rep(NA, 3)))
g <- ggplot(my_data, mapping = aes(x = val)) 
g1 <- g + geom_histogram()
g2 <- g + geom_bar()
gridExtra::grid.arrange(g1, g2, ncol = 2)
```

## Answer Quiz

![Warnings about NAs from ggplot.](warnings-NA.png)

```{r}
sum(my_data$val); mean(my_data$val)
sum(my_data$val, na.rm = TRUE); mean(my_data$val, na.rm = TRUE)
```

## Answer Quiz

-   Using `na.rm = TRUE`.

. . .

```{r}
#| eval: false
#| echo: true
set.seed(999)
my_data <- tibble(val = c(round(runif(97, 1, 10), 0), rep(NA, 3)))
g <- ggplot(my_data, mapping = aes(x = val)) 
g1 <- g + geom_histogram(binwidth = 1, na.rm = TRUE)
g2 <- g + geom_bar(na.rm = TRUE)
gridExtra::grid.arrange(g1, g2, ncol = 2)
sum(my_data$val); mean(my_data$val)
sum(my_data$val, na.rm = TRUE); mean(my_data$val, na.rm = TRUE)
```

## Answer Quiz

```{r}
#| eval: true
#| echo: false
set.seed(999)
my_data <- tibble(val = c(round(runif(97, 1, 10), 0), rep(NA, 3)))
g <- ggplot(my_data, mapping = aes(x = val)) 
g1 <- g + geom_histogram(binwidth = 1, na.rm = TRUE)
g2 <- g + geom_bar(na.rm = TRUE)
gridExtra::grid.arrange(g1, g2, ncol = 2)
```

```{r}
sum(my_data$val); mean(my_data$val)
sum(my_data$val, na.rm = TRUE); mean(my_data$val, na.rm = TRUE)
```

## Answer Quiz

-   Now the two seems to handle NAs the same way.
-   Normal rule: One NA =\> result NA
-   For `sum()` and `mean()` `na.rm = TRUE` returns the result of the
    calculation when NAs are removed

## Covariation

-   Use facets as above
-   Some cases
    -   Categorical and continuous variable
    -   Two categorial variables
    -   Two continuous variables

## Categorical and continuous variable

-   `geom_freqpoly()`
    -   Lines, category by colour or linetype (BW)
    -   Default gives count, density often better

## Categorical and continuous variable; code

```{r freqpoly_code, eval = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(edu_fac)) %>%
ggplot(mapping = aes(x = income, y = ..density..)) +
  geom_freqpoly(mapping = aes(colour = edu_fac), binwidth = 10000)
```

-   Try also `binwidth = 3000`

## Categorical and continuous variable; plot

```{r freqpoly_plot, echo = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(edu_fac)) %>%
ggplot(mapping = aes(x = income, y = ..density..)) +
  geom_freqpoly(mapping = aes(colour = edu_fac), binwidth = 5000)
```

## Two categorical variable; code

```{r geom_count_code, eval = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(edu_fac)) %>%
  ggplot() +
  geom_count(mapping = aes(x = marital, y = edu_fac))
```

## Two categorical variable; plot

```{r geom_count_plot, echo = FALSE}
my_heights %>% 
  mutate(
    edu_fac = cut(education, 
                  breaks = c(0, 12, 14, 16, 21), 
                  labels = c("NotHS", "NotTC", "NotC", "C+"),
                  right = FALSE) 
  ) %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(edu_fac)) %>%
  ggplot() +
  geom_count(mapping = aes(x = marital, y = edu_fac))
```

## One continuouse variable, one with many categories

```{r, eval = FALSE}
my_heights %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(education)) %>%
  ggplot() +
  geom_point(mapping = aes(x = education, y = income), alpha = 0.05)
```

## One continuouse variable, one with many categories

```{r, echo = FALSE}
my_heights %>% 
  filter(income > 0 & !is.na(weight) & !is.na(afqt) & !is.na(education) & income < 200000) %>%
  ggplot() +
  geom_point(mapping = aes(x = education, y = income), alpha = 0.05)
```

## Two continuous variables

-   Use `diamonds` dataset
-   Smaller point size

. . .

```{r, eval = FALSE}
diamonds %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(size = 0.1)
```

## Two continuous variables

```{r, echo = FALSE}
diamonds %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(size = 0.1)
```

## Two continuous variables; alpha

```{r, eval = FALSE}
diamonds %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(alpha = 0.1, size = 0.2)
```

## Two continuous variables; alpha

```{r, echo = FALSE}
diamonds %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(alpha = 0.1, size = 0.2)
```

## Two continuous variables; make one categorical

```{r, eval = FALSE}
diamonds %>% 
  filter(carat <= 2) %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
```

## Two continuous variables; make one categorical

-   Not like the one in r4ds

. . .

```{r, echo = FALSE}
diamonds %>% 
  filter(carat <= 2) %>% 
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
```

## References
