---
title: "Our Workflow"
author: "ag"
format:
  revealjs:
        theme: simple
        footer: '[MSB105](/index.html)'
        reveal_options:
        code-fold: show
        incremental: true
        smaller: true
        scrollable: true
        slide-number: c/t
editor: visual
editor_options:
  markdown:
    wrap: 72
    canonical: true
    chunk_output_type: console
echo: true
eval: true
---

## Introduction Workflow

-   We allways start by defining a new repository at Github
    1.  Remember to choose an R .gitignore

    2.  `.gitignore` specifies the files in our project that Git should
        ignore
-   Then we create a new project in RStudio with git version control
-   Then we do a `Pull` from Github
    1.  This will copy the files automatically generated at Github down
        to our local project

    2.  Edit the .gitignore file
-   Then we create a new Quarto Document from **File \> New File** menu
    in RStudio
    1.  Just save the template into your project

    2.  Do a Commit, Pull, Push

        1.  Remeber to write an informative commit message (be kind to
            others and a future self)

## Introduction Workflow

-   Start editing your Quarto Document
    1.  Save when you have done some work

    2.  Do a Commit, Pull, Push

## Creating a New Repository on Github

![Create new repository at github.](new-repo.png)

## Give repo a name

![Give the repo a name](repo-name.png)

## Configure repo

![Configure repo](repo-config.png)

## Select R .gitignore

![Select R .gitignore](rep-gitignore-tmpl.png)

## Create repo

![Ceate repo](repo-create.png)

## Copy repo address

![Copy repo address](repo-copy-addr.png)

## RStudio `New Projectâ€¦` from `File` menu

![Select new project from File menu](rs-new-proj.png)

## Choose Version Control

![New Project with Version Control](rs-new-proj-vc.png)

## Choose Git Version Control

![Select Git for version Control](rs-new-proj-vc-git.png)

## Paste in Repo Address

![Paste Repo Address](rs-create-proj.png)

## Edit .gitignore

![Edit the .gitignore File](rs-edit-gitignore.png)

## RStudio New Quarto Document

![Select File \> New File \> Quarto Document...](rs-new-quarto-doc.png)

## RStudio Name new Quarto Document

![Give Title of Quarto Document](rs-create-quarto-doc.png)

## Save New Quarto document

![Save New Quarto Document. You might add some text yourself before
saving.](rs-quarto-doc-save-as.png)

RStudio Name File

![Give Document File a name](rs-quarto-doc-save-name.png)

## Select Git Tab

![Files Changed since we Created Project](rs-git-changed-files.png)

## Press Commit Button

![Press Commit Button](rs-git-changed-files-commit-button.png)

## Commit

![Stage Files, write commit message and Press Commit
Button](rs-git-commit.png)

## Commit Results

![Commit Results. Click Close Button.](rs-git-commit-res.png)

## Click Pull Button

![Pull Down from Github. We know that there have been no changes, but
Commit, Pull, Push is a nice habit.](rs-git-pull.png)

## Click Push Button

![Result of Push. Two files Pushed to Github without any
problems.](rs-git-push-res.png)

## Updated Repo on Github

![The new File at Github.](repo-updated.png)

## RStudio File \> Save All

![Save All Changes in Project.](rs-save-all.png)

## RStudio Close Project

![Close your Project.](rs-close-proj.png)

## Work flow Projects chap. 8 r4ds

## Workflow: projects (chap. 8)

-   Not to much new, but some points
-   Remember un-check these options

![Do not restore .Rdata and never Save .Rdate. We'll create our R
objects by code.](no-restore-Rdata.png)

## Workflow: projects (chap. 8)

-   Nice short-cuts to restart R
-   Press Cmd/Ctrl + Shift + F10 to restart RStudio.
-   Press Cmd/Ctrl + Shift + S to rerun the current script.
-   Remember that 'working directory' for us is the directory where our
    `.qmd` file is located. Everything is relative to current Quarto
    Document.
-   You should **never** have to set you working directory.

## Workflow: projects (chap. 8)

-   Working directory for Project.

. . .

![Working Directory for Project is top Directory where the .Rproj file
is located.](working-directory.png)

-   Working directory for current Quarto Document is the directory where
    the Quarto Document is situated.

. . .

```{r}
getwd()
```

-   In the sub-dir wf of the sub-dir explore-data in the project folder

## Relative Paths

-   ".." is one directory up in unix parlour.
-   "." is current directory
-   If I want to read the first 7 lines of a file intro.qmd in a sub-dir
    intro in a directory called introduction at the to level of my
    project I could do:

. . .

```{r}
# relative part
my_file <- "./../../introduction/intro/intro.qmd"
my_text <- readLines(con = file(my_file, encoding = "UTF-8"), n = 7)
#close(con)
```

```{r}
cat(my_text, sep = "\n")
```

## Relative Paths cont.

-   Relative paths work best for stuff located below the current
    document.
-   Ex. sample1.csv in Data directory in current directory.
-   We can access with "./Data/sample1.csv".
    -   "./" not really needed
-   We can move current directory, with sub-directories, to a new
    location and everything will still work.

## Absolute Path

-   **Do not use absolute paths in code you will share**
    -   You should also try to avoid it in code you don't intend to
        share

    -   Remember: "Be kind to future self"
-   Read from file with absolute path (this time only 4 lines read):

. . .

```{r}
#| eval: false
# Absolute path
# Works just on one machine, hence eval: false
my_file <- "/Users/agwd/Dev/QQ_MSB105/introduction/intro/intro.qmd"
my_text <- readLines(con = file(my_file, encoding = "UTF-8"), n = 4)
#close(con)
```

```{r}
#| eval: false
cat(my_text, sep = "\n")
```

```{r}
#| echo: false
#rm(my_text)
```
